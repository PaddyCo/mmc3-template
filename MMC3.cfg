MEMORY {
    ZP:         start = $0000, size = $0100, type = rw;
    STACK:      start = $0100, size = $0100; 
    RAM:        start = $0200, size = $0600; 
    WRAM:       start = $6000, size = $2000; 
    HEADER:     start = $0000, size = $0010, fill = yes;

    # Total PRG ROM size has to be 32/64/128/256/512/1024/2048 kb
    # (In FCEUX at least, Mesen doesn't seem to mind)
    # Banks are 8kb each, fixed banks are 16kb total
    
    LOPRG00:      start = $8000, size = $2000, file = %O, fill = yes;
    LOPRG01:      start = $8000, size = $2000, file = %O, fill = yes;
    # - 16kb 
    LOPRG02:      start = $8000, size = $2000, file = %O, fill = yes;
    LOPRG03:      start = $8000, size = $2000, file = %O, fill = yes;
    # - 32kb
    #LOPRG04:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG05:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG06:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG07:      start = $8000, size = $2000, file = %O, fill = yes;
    # - 64kb
    #LOPRG08:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG09:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG10:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG11:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG12:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG13:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG14:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG15:      start = $8000, size = $2000, file = %O, fill = yes;
    # - 128kb
    #LOPRG16:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG17:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG18:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG19:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG20:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG21:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG22:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG23:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG24:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG25:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG26:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG27:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG28:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG29:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG30:      start = $8000, size = $2000, file = %O, fill = yes;
    #LOPRG31:      start = $8000, size = $2000, file = %O, fill = yes;
    # - 256kb total
    # ... You get the idea!
    
    HIPRG00:      start = $A000, size = $2000, file = %O, fill = yes;
    HIPRG01:      start = $A000, size = $2000, file = %O, fill = yes;
    # - 16kb 
    #HIPRG02:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG03:      start = $A000, size = $2000, file = %O, fill = yes;
    # - 32kb
    #HIPRG04:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG05:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG06:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG07:      start = $A000, size = $2000, file = %O, fill = yes;
    # - 64kb
    #HIPRG08:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG09:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG10:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG11:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG12:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG13:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG14:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG15:      start = $A000, size = $2000, file = %O, fill = yes;
    # - 128kb
    #HIPRG16:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG17:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG18:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG19:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG20:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG21:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG22:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG23:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG24:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG25:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG26:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG27:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG28:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG29:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG30:      start = $A000, size = $2000, file = %O, fill = yes;
    #HIPRG31:      start = $A000, size = $2000, file = %O, fill = yes;
    # - 256kb total
    # ... You get the idea!



    # Fixed PRG Bank 
    FIXED01:     start = $c000, size = $4000, file = %O ,fill = yes;

    # CHR banks
    CHR:        start = $0000, size = $2000 * 2, fill = yes, file = %O;
}




SEGMENTS {
    ZEROPAGE:   load = ZP, type = zp;
    HEADER:     load = HEADER, type = ro;
    CHARS:      load = CHR, type = rw, optional = yes;
    BSS:        load = RAM, type = bss;
    XRAM:       load = WRAM, type = bss, optional = yes;

    LOBANK00:     load = LOPRG00, type = ro, optional = yes;
    LOBANK01:     load = LOPRG01, type = ro, optional = yes;
    LOBANK02:     load = LOPRG02, type = ro, optional = yes;
    LOBANK03:     load = LOPRG03, type = ro, optional = yes;

    HIBANK00:     load = HIPRG00, type = ro, optional = yes;
    HIBANK01:     load = HIPRG01, type = ro, optional = yes;

    CODE:       load = FIXED01, type = ro, start = $C000;
    SAMPLES:    load = FIXED01, type = ro, align = 64, optional = yes;
    STARTUP:    load = FIXED01, type = ro;
    VECTORS:    load = FIXED01, start = $FFFA, type = ro;
}


SYMBOLS {
    NES_LO_BANKS:       type = weak, value = 4;
    NES_HI_BANKS:       type = weak, value = 2;
    NES_MAPPER:         type = weak, value = 4; # mapper number, 4 = mmc3, txrom
    NES_PRG_BANKS:      type = weak, value = (NES_LO_BANKS + NES_HI_BANKS + 2)/2; # number of 16K PRG banks 
    NES_CHR_BANKS:      type = weak, value = 2; # number of 8K CHR banks
    NES_MIRRORING:      type = weak, value = 0; # 0 horizontal, 1 vertical, 8 four screen, mmc3 can switch mirroring
}

